// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	kemejakeranjangs "kemejaku/business/kemejakeranjangs"

	mock "github.com/stretchr/testify/mock"
)

// KemejaKeranjangRepoInterface is an autogenerated mock type for the KemejaKeranjangRepoInterface type
type KemejaKeranjangRepoInterface struct {
	mock.Mock
}

// DeleteKemejaKeranjang provides a mock function with given fields: id, ctx
func (_m *KemejaKeranjangRepoInterface) DeleteKemejaKeranjang(id int, ctx context.Context) (kemejakeranjangs.KemejaKeranjang, error) {
	ret := _m.Called(id, ctx)

	var r0 kemejakeranjangs.KemejaKeranjang
	if rf, ok := ret.Get(0).(func(int, context.Context) kemejakeranjangs.KemejaKeranjang); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Get(0).(kemejakeranjangs.KemejaKeranjang)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditKemejaKeranjang provides a mock function with given fields: kk, id, ctx
func (_m *KemejaKeranjangRepoInterface) EditKemejaKeranjang(kk kemejakeranjangs.KemejaKeranjang, id int, ctx context.Context) (kemejakeranjangs.KemejaKeranjang, error) {
	ret := _m.Called(kk, id, ctx)

	var r0 kemejakeranjangs.KemejaKeranjang
	if rf, ok := ret.Get(0).(func(kemejakeranjangs.KemejaKeranjang, int, context.Context) kemejakeranjangs.KemejaKeranjang); ok {
		r0 = rf(kk, id, ctx)
	} else {
		r0 = ret.Get(0).(kemejakeranjangs.KemejaKeranjang)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kemejakeranjangs.KemejaKeranjang, int, context.Context) error); ok {
		r1 = rf(kk, id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllKemejaKeranjang provides a mock function with given fields: ctx
func (_m *KemejaKeranjangRepoInterface) GetAllKemejaKeranjang(ctx context.Context) ([]kemejakeranjangs.KemejaKeranjang, error) {
	ret := _m.Called(ctx)

	var r0 []kemejakeranjangs.KemejaKeranjang
	if rf, ok := ret.Get(0).(func(context.Context) []kemejakeranjangs.KemejaKeranjang); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kemejakeranjangs.KemejaKeranjang)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKemejaKeranjangDetail provides a mock function with given fields: id, ctx
func (_m *KemejaKeranjangRepoInterface) GetKemejaKeranjangDetail(id int, ctx context.Context) (kemejakeranjangs.KemejaKeranjang, error) {
	ret := _m.Called(id, ctx)

	var r0 kemejakeranjangs.KemejaKeranjang
	if rf, ok := ret.Get(0).(func(int, context.Context) kemejakeranjangs.KemejaKeranjang); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Get(0).(kemejakeranjangs.KemejaKeranjang)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertKemejaKeranjang provides a mock function with given fields: kk, ctx
func (_m *KemejaKeranjangRepoInterface) InsertKemejaKeranjang(kk kemejakeranjangs.KemejaKeranjang, ctx context.Context) (kemejakeranjangs.KemejaKeranjang, error) {
	ret := _m.Called(kk, ctx)

	var r0 kemejakeranjangs.KemejaKeranjang
	if rf, ok := ret.Get(0).(func(kemejakeranjangs.KemejaKeranjang, context.Context) kemejakeranjangs.KemejaKeranjang); ok {
		r0 = rf(kk, ctx)
	} else {
		r0 = ret.Get(0).(kemejakeranjangs.KemejaKeranjang)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kemejakeranjangs.KemejaKeranjang, context.Context) error); ok {
		r1 = rf(kk, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
