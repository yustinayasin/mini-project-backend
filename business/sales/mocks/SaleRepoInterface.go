// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	sales "kemejaku/business/sales"

	mock "github.com/stretchr/testify/mock"
)

// SaleRepoInterface is an autogenerated mock type for the SaleRepoInterface type
type SaleRepoInterface struct {
	mock.Mock
}

// DeleteSale provides a mock function with given fields: id, ctx
func (_m *SaleRepoInterface) DeleteSale(id int, ctx context.Context) (sales.Sale, error) {
	ret := _m.Called(id, ctx)

	var r0 sales.Sale
	if rf, ok := ret.Get(0).(func(int, context.Context) sales.Sale); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Get(0).(sales.Sale)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditSale provides a mock function with given fields: sale, id, ctx
func (_m *SaleRepoInterface) EditSale(sale sales.Sale, id int, ctx context.Context) (sales.Sale, error) {
	ret := _m.Called(sale, id, ctx)

	var r0 sales.Sale
	if rf, ok := ret.Get(0).(func(sales.Sale, int, context.Context) sales.Sale); ok {
		r0 = rf(sale, id, ctx)
	} else {
		r0 = ret.Get(0).(sales.Sale)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sales.Sale, int, context.Context) error); ok {
		r1 = rf(sale, id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSale provides a mock function with given fields: ctx
func (_m *SaleRepoInterface) GetAllSale(ctx context.Context) ([]sales.Sale, error) {
	ret := _m.Called(ctx)

	var r0 []sales.Sale
	if rf, ok := ret.Get(0).(func(context.Context) []sales.Sale); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sales.Sale)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSaleDetail provides a mock function with given fields: id, ctx
func (_m *SaleRepoInterface) GetSaleDetail(id int, ctx context.Context) (sales.Sale, error) {
	ret := _m.Called(id, ctx)

	var r0 sales.Sale
	if rf, ok := ret.Get(0).(func(int, context.Context) sales.Sale); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Get(0).(sales.Sale)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertSale provides a mock function with given fields: sale, ctx
func (_m *SaleRepoInterface) InsertSale(sale sales.Sale, ctx context.Context) (sales.Sale, error) {
	ret := _m.Called(sale, ctx)

	var r0 sales.Sale
	if rf, ok := ret.Get(0).(func(sales.Sale, context.Context) sales.Sale); ok {
		r0 = rf(sale, ctx)
	} else {
		r0 = ret.Get(0).(sales.Sale)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sales.Sale, context.Context) error); ok {
		r1 = rf(sale, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
