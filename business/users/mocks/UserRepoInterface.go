// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	users "kemejaku/business/users"

	mock "github.com/stretchr/testify/mock"
)

// UserRepoInterface is an autogenerated mock type for the UserRepoInterface type
type UserRepoInterface struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: id, ctx
func (_m *UserRepoInterface) DeleteUser(id int, ctx context.Context) (users.User, error) {
	ret := _m.Called(id, ctx)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(int, context.Context) users.User); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditUser provides a mock function with given fields: user, id, ctx
func (_m *UserRepoInterface) EditUser(user users.User, id int, ctx context.Context) (users.User, error) {
	ret := _m.Called(user, id, ctx)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(users.User, int, context.Context) users.User); ok {
		r0 = rf(user, id, ctx)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.User, int, context.Context) error); ok {
		r1 = rf(user, id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *UserRepoInterface) GetAllUsers(ctx context.Context) ([]users.User, error) {
	ret := _m.Called(ctx)

	var r0 []users.User
	if rf, ok := ret.Get(0).(func(context.Context) []users.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetail provides a mock function with given fields: id, ctx
func (_m *UserRepoInterface) GetUserDetail(id int, ctx context.Context) (users.User, error) {
	ret := _m.Called(id, ctx)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(int, context.Context) users.User); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: user, ctx
func (_m *UserRepoInterface) Login(user users.User, ctx context.Context) (users.User, error) {
	ret := _m.Called(user, ctx)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(users.User, context.Context) users.User); ok {
		r0 = rf(user, ctx)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.User, context.Context) error); ok {
		r1 = rf(user, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: user, ctx
func (_m *UserRepoInterface) SignUp(user users.User, ctx context.Context) (users.User, error) {
	ret := _m.Called(user, ctx)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(users.User, context.Context) users.User); ok {
		r0 = rf(user, ctx)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.User, context.Context) error); ok {
		r1 = rf(user, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
