// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	kemejas "kemejaku/business/kemejas"

	mock "github.com/stretchr/testify/mock"
)

// KemejaRepoInterface is an autogenerated mock type for the KemejaRepoInterface type
type KemejaRepoInterface struct {
	mock.Mock
}

// DeleteKemeja provides a mock function with given fields: id, ctx
func (_m *KemejaRepoInterface) DeleteKemeja(id int, ctx context.Context) (kemejas.Kemeja, error) {
	ret := _m.Called(id, ctx)

	var r0 kemejas.Kemeja
	if rf, ok := ret.Get(0).(func(int, context.Context) kemejas.Kemeja); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Get(0).(kemejas.Kemeja)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditKemeja provides a mock function with given fields: kemeja, id, ctx
func (_m *KemejaRepoInterface) EditKemeja(kemeja kemejas.Kemeja, id int, ctx context.Context) (kemejas.Kemeja, error) {
	ret := _m.Called(kemeja, id, ctx)

	var r0 kemejas.Kemeja
	if rf, ok := ret.Get(0).(func(kemejas.Kemeja, int, context.Context) kemejas.Kemeja); ok {
		r0 = rf(kemeja, id, ctx)
	} else {
		r0 = ret.Get(0).(kemejas.Kemeja)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kemejas.Kemeja, int, context.Context) error); ok {
		r1 = rf(kemeja, id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllKemeja provides a mock function with given fields: ctx
func (_m *KemejaRepoInterface) GetAllKemeja(ctx context.Context) ([]kemejas.Kemeja, error) {
	ret := _m.Called(ctx)

	var r0 []kemejas.Kemeja
	if rf, ok := ret.Get(0).(func(context.Context) []kemejas.Kemeja); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kemejas.Kemeja)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKemejaDetail provides a mock function with given fields: id, ctx
func (_m *KemejaRepoInterface) GetKemejaDetail(id int, ctx context.Context) (kemejas.Kemeja, error) {
	ret := _m.Called(id, ctx)

	var r0 kemejas.Kemeja
	if rf, ok := ret.Get(0).(func(int, context.Context) kemejas.Kemeja); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Get(0).(kemejas.Kemeja)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertKemeja provides a mock function with given fields: kemeja, ctx
func (_m *KemejaRepoInterface) InsertKemeja(kemeja kemejas.Kemeja, ctx context.Context) (kemejas.Kemeja, error) {
	ret := _m.Called(kemeja, ctx)

	var r0 kemejas.Kemeja
	if rf, ok := ret.Get(0).(func(kemejas.Kemeja, context.Context) kemejas.Kemeja); ok {
		r0 = rf(kemeja, ctx)
	} else {
		r0 = ret.Get(0).(kemejas.Kemeja)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kemejas.Kemeja, context.Context) error); ok {
		r1 = rf(kemeja, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
